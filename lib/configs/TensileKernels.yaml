#    solution.kernelName = "Cijk_Ailk_Bljk_SB_MT128x128x08_K1";
#
#    solution.workGroupSize = Tensile::dim3{256,1,1};
#    solution.macroTile = Tensile::dim3{128,128,1};
#    solution.debugKernel = false;
#
---
solutions:       
  - name:            'Cijk_Ailk_Bljk_SB_MT128x128x08_K1'
    workGroup:       [ 256,   1, 1 ]
    threadTile:      [   8,   8, 1 ]
    macroTile:       [ 128, 128, 1 ]
    index:           0
  - name:            'Cijk_Ailk_Bjlk_SB_MT128x128x08_K1'
    workGroup:       [ 256,   1, 1 ]
    threadTile:      [   8,   8, 1 ]
    macroTile:       [ 128, 128, 1 ]
    index:           1
  - name:            'Cijk_Alik_Bljk_SB_MT128x128x08_K1'
    workGroup:       [ 256,   1, 1 ]
    threadTile:      [   8,   8, 1 ]
    macroTile:       [ 128, 128, 1 ]
    index:           2
  - name:            'Cijk_Alik_Bjlk_SB_MT128x128x08_K1'
    workGroup:       [ 256,   1, 1 ]
    threadTile:      [   8,   8, 1 ]
    macroTile:       [ 128, 128, 1 ]
    index:           3
library:         
  type:            Problem
  rows:            
    - predicate:       { type: And, value: [ { type: ADimensionOrder, value: [ 0, 1, 2 ] }, 
                                             { type: BDimensionOrder, value: [ 0, 1, 2 ] }, 
                                             { type: CDimensionOrder, value: [ 0, 1, 2 ] }, 
                                             { type: DDimensionOrder, value: [ 0, 1, 2 ] } ] }
      library:         
        type:            Single
        index:           0
    - predicate:       { type: And, value: [ { type: ADimensionOrder, value: [ 0, 1, 2 ] }, 
                                             { type: BDimensionOrder, value: [ 1, 0, 2 ] }, 
                                             { type: CDimensionOrder, value: [ 0, 1, 2 ] }, 
                                             { type: DDimensionOrder, value: [ 0, 1, 2 ] } ] }
      library:         
        type:            Single
        index:           1
    - predicate:       { type: And, value: [ { type: ADimensionOrder, value: [ 1, 0, 2 ] }, 
                                             { type: BDimensionOrder, value: [ 0, 1, 2 ] }, 
                                             { type: CDimensionOrder, value: [ 0, 1, 2 ] }, 
                                             { type: DDimensionOrder, value: [ 0, 1, 2 ] } ] }
      library:         
        type:            Single
        index:           2
    - predicate:       { type: And, value: [ { type: ADimensionOrder, value: [ 1, 0, 2 ] },
                                             { type: BDimensionOrder, value: [ 1, 0, 2 ] }, 
                                             { type: CDimensionOrder, value: [ 0, 1, 2 ] }, 
                                             { type: DDimensionOrder, value: [ 0, 1, 2 ] } ] }
      library:         
        type:            Single
        index:           3
...
